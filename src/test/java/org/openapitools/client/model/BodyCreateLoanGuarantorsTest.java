/*
 * Allcloud (Allcloud)
 * # Integration Document  The following are the endpoints to be called during and pre/post disbursement state of a loan.  ## Authentication  Authentication details and host will be shared privately.  ## Workflow  **Create Loan** is the initial endpoint to be called to create a loan. Loan will be processed in the background and the status of loan will be provided through the configured Webhook. However, the client can also poll the server via the **Get Loan Details** endpoint to know the loan's status(**Get Loan Details** is rate throttled and polling this API will be restricted). Loan's shall be considered rejected if proper response is not available within 10minutes.  All other endpoints are self-explanatory and can be retried upto 3 times before marking as failure.  ## Allowed Links  All Link attributes should contain 1. Accessible File Link URL which can be Public/Expiry URL/Whitelisted File Server Link(Write to tech.colending@credavenue.com for obtaining our IP address to whitelist) 2. File Link URL with Header Authentication (Header values should be shared with tech.colending@credavenue.com)  ## Allowed Fields Length <table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">  <colgroup>  <col  class=\"org-left\" />  <col  class=\"org-left\" />  </colgroup> <thead> <tr> <th scope=\"col\" class=\"org-left\">Data Type</th> <th scope=\"col\" class=\"org-left\">Max Length</th> </tr> </thead>  <tbody> <tr> <td class=\"org-left\">String</td> <td class=\"org-left\">65,535 bytes</td> </tr>  <tr> <td class=\"org-left\">Float</td> <td class=\"org-left\">8 bytes</td> </tr>  <tr> <td class=\"org-left\">Integer</td> <td class=\"org-left\">4 bytes</td> </tr>  <tr> <td class=\"org-left\">Date</td> <td class=\"org-left\">10 characters</td> </tr>  </tbody> </table>  # Webhooks  Webhooks can be configured for the below events  1. Loan status change      Response Payload :      {         \"product_id\": \"\",         \"client_loan_id\": \"\",         \"principal_amount\": \"\",         \"interest_rate\": \"\",         \"tenure\": \"\",         \"tenure_frequency\": \"MONTHLY\",         \"cibil_score\": \"\",         \"purpose\": \"\",         \"repayment_frequency\":\"\",         \"number_of_repayments\": \"\",         \"status\": \"\",         \"principal_outstanding\": \"\",         \"reject_reason\": \"\"     }          Statuses : ['new', 'approved', 'rejected', 'agreement_signed', 'dropped', 'disbursement_ready', 'disbursed', 'matured', 'partner_settled']     2. Loan disbursement details (Disbursed through razorpay)      Callback Payload:      {         \"client_loan_id\":\"\",         \"status\":\"borrower_disbursed\",         \"disbursed_date\":\"\",         \"utr_number\":\"\",         \"disbursement_type\":\"\",         \"payment_reversed\": \"TRUE/FALSE\",         \"disbursement_amount\":\"\",         \"investor_disbursed_amount\": \"\",         \"partner_disbursed_amount\": \"\",         \"differential_interest\":\"\",         \"investor_differential_interest\":\"\",         \"partner_differential_interest\":\"\",         \"differential_days\":\"\",         \"interest_start_date\":\"\",         \"investor_processing_fee\":\"\",         \"partner_processing_fee\":\"\",         \"investor_stamp_duty\":\"\",         \"partner_stamp_duty\":\"\",         \"investor_documentation_charges\":\"\",         \"partner_documentation_charges\":\"\"     }  Provide the following details to configure the webhooks 1. callback URL 2. authentication for the callback URL (header authentication)    # Validations  **PAN**  - **Example**: ABGPA1232P - **Sequence**: First five digits will be alpha, next four will be Numerical and again last single digit will be alpha  **GSTIN**  - **Example**: 33AAACT2727Q1ZV - **Sequence**: First two digits is Numerical, Next is PAN sequence as specified above, again thirteenth digit will be numerical, fourteenth digit is alpha, last digit will be alpha or numerical  **CIN**  - **Example**: U65929TN2017PTC117196 - **Sequence**: First digit is Alpha, next 5 numeric digits, next two alpha, next set of 4 numeric digits, Next 3 alpha, last 6 numeric digits  **PASSPORT**  - **Example**: A2096457 - **Sequence**: Total 8 digits, first digit is Alpha, remaining digits are numerical  **AADHAR NO**  - The standard 12 digits numerical.  **MOBILE NO**  - **Sequence**: 10 numerical digits  **IFSC CODE**  - **Example**: PUNB0596600 - **Sequence**: First four alpha, next fifth digit is 0 (zero) always and last six digit is alpha/numeric. Totally 11 digits.  **PIN CODE**  - 6 numerical digits
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@colending.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.BodyCreateLoanVideoKycDetail;
import org.threeten.bp.LocalDate;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for BodyCreateLoanGuarantors
 */
public class BodyCreateLoanGuarantorsTest {
    private final BodyCreateLoanGuarantors model = new BodyCreateLoanGuarantors();

    /**
     * Model tests for BodyCreateLoanGuarantors
     */
    @Test
    public void testBodyCreateLoanGuarantors() {
        // TODO: test BodyCreateLoanGuarantors
    }

    /**
     * Test the property 'relationshipWithApplicant'
     */
    @Test
    public void relationshipWithApplicantTest() {
        // TODO: test relationshipWithApplicant
    }

    /**
     * Test the property 'firstName'
     */
    @Test
    public void firstNameTest() {
        // TODO: test firstName
    }

    /**
     * Test the property 'middleName'
     */
    @Test
    public void middleNameTest() {
        // TODO: test middleName
    }

    /**
     * Test the property 'lastName'
     */
    @Test
    public void lastNameTest() {
        // TODO: test lastName
    }

    /**
     * Test the property 'dateOfBirth'
     */
    @Test
    public void dateOfBirthTest() {
        // TODO: test dateOfBirth
    }

    /**
     * Test the property 'age'
     */
    @Test
    public void ageTest() {
        // TODO: test age
    }

    /**
     * Test the property 'gender'
     */
    @Test
    public void genderTest() {
        // TODO: test gender
    }

    /**
     * Test the property 'currentAddress'
     */
    @Test
    public void currentAddressTest() {
        // TODO: test currentAddress
    }

    /**
     * Test the property 'currentDistrict'
     */
    @Test
    public void currentDistrictTest() {
        // TODO: test currentDistrict
    }

    /**
     * Test the property 'currentCity'
     */
    @Test
    public void currentCityTest() {
        // TODO: test currentCity
    }

    /**
     * Test the property 'currentCityTier'
     */
    @Test
    public void currentCityTierTest() {
        // TODO: test currentCityTier
    }

    /**
     * Test the property 'currentState'
     */
    @Test
    public void currentStateTest() {
        // TODO: test currentState
    }

    /**
     * Test the property 'currentPincode'
     */
    @Test
    public void currentPincodeTest() {
        // TODO: test currentPincode
    }

    /**
     * Test the property 'yearsOfStayInCurrentAddress'
     */
    @Test
    public void yearsOfStayInCurrentAddressTest() {
        // TODO: test yearsOfStayInCurrentAddress
    }

    /**
     * Test the property 'residenceTypeCurrentAddress'
     */
    @Test
    public void residenceTypeCurrentAddressTest() {
        // TODO: test residenceTypeCurrentAddress
    }

    /**
     * Test the property 'permanentAddress'
     */
    @Test
    public void permanentAddressTest() {
        // TODO: test permanentAddress
    }

    /**
     * Test the property 'permanentDistrict'
     */
    @Test
    public void permanentDistrictTest() {
        // TODO: test permanentDistrict
    }

    /**
     * Test the property 'permanentCity'
     */
    @Test
    public void permanentCityTest() {
        // TODO: test permanentCity
    }

    /**
     * Test the property 'permanentCityTier'
     */
    @Test
    public void permanentCityTierTest() {
        // TODO: test permanentCityTier
    }

    /**
     * Test the property 'permanentState'
     */
    @Test
    public void permanentStateTest() {
        // TODO: test permanentState
    }

    /**
     * Test the property 'permanentPincode'
     */
    @Test
    public void permanentPincodeTest() {
        // TODO: test permanentPincode
    }

    /**
     * Test the property 'yearsOfStayInPermanentAddress'
     */
    @Test
    public void yearsOfStayInPermanentAddressTest() {
        // TODO: test yearsOfStayInPermanentAddress
    }

    /**
     * Test the property 'residenceTypePermanentAddress'
     */
    @Test
    public void residenceTypePermanentAddressTest() {
        // TODO: test residenceTypePermanentAddress
    }

    /**
     * Test the property 'mobileNumber'
     */
    @Test
    public void mobileNumberTest() {
        // TODO: test mobileNumber
    }

    /**
     * Test the property 'email'
     */
    @Test
    public void emailTest() {
        // TODO: test email
    }

    /**
     * Test the property 'panNumber'
     */
    @Test
    public void panNumberTest() {
        // TODO: test panNumber
    }

    /**
     * Test the property 'panNumberLink'
     */
    @Test
    public void panNumberLinkTest() {
        // TODO: test panNumberLink
    }

    /**
     * Test the property 'panNumberLinkPassword'
     */
    @Test
    public void panNumberLinkPasswordTest() {
        // TODO: test panNumberLinkPassword
    }

    /**
     * Test the property 'aadharNumber'
     */
    @Test
    public void aadharNumberTest() {
        // TODO: test aadharNumber
    }

    /**
     * Test the property 'aadharNumberLink'
     */
    @Test
    public void aadharNumberLinkTest() {
        // TODO: test aadharNumberLink
    }

    /**
     * Test the property 'aadharNumberLinkPassword'
     */
    @Test
    public void aadharNumberLinkPasswordTest() {
        // TODO: test aadharNumberLinkPassword
    }

    /**
     * Test the property 'voterIdNumber'
     */
    @Test
    public void voterIdNumberTest() {
        // TODO: test voterIdNumber
    }

    /**
     * Test the property 'votingIdNumberLink'
     */
    @Test
    public void votingIdNumberLinkTest() {
        // TODO: test votingIdNumberLink
    }

    /**
     * Test the property 'votingIdNumberLinkPassword'
     */
    @Test
    public void votingIdNumberLinkPasswordTest() {
        // TODO: test votingIdNumberLinkPassword
    }

    /**
     * Test the property 'drivingLicenseNumber'
     */
    @Test
    public void drivingLicenseNumberTest() {
        // TODO: test drivingLicenseNumber
    }

    /**
     * Test the property 'drivingLicenceNumberLink'
     */
    @Test
    public void drivingLicenceNumberLinkTest() {
        // TODO: test drivingLicenceNumberLink
    }

    /**
     * Test the property 'drivingLicenceNumberLinkPassword'
     */
    @Test
    public void drivingLicenceNumberLinkPasswordTest() {
        // TODO: test drivingLicenceNumberLinkPassword
    }

    /**
     * Test the property 'passportNumber'
     */
    @Test
    public void passportNumberTest() {
        // TODO: test passportNumber
    }

    /**
     * Test the property 'passportNumberLink'
     */
    @Test
    public void passportNumberLinkTest() {
        // TODO: test passportNumberLink
    }

    /**
     * Test the property 'passportNumberLinkPassword'
     */
    @Test
    public void passportNumberLinkPasswordTest() {
        // TODO: test passportNumberLinkPassword
    }

    /**
     * Test the property 'videoImageLink'
     */
    @Test
    public void videoImageLinkTest() {
        // TODO: test videoImageLink
    }

    /**
     * Test the property 'videoImageLinkPassword'
     */
    @Test
    public void videoImageLinkPasswordTest() {
        // TODO: test videoImageLinkPassword
    }

    /**
     * Test the property 'videoKycDetail'
     */
    @Test
    public void videoKycDetailTest() {
        // TODO: test videoKycDetail
    }

    /**
     * Test the property 'otherKycNumber'
     */
    @Test
    public void otherKycNumberTest() {
        // TODO: test otherKycNumber
    }

    /**
     * Test the property 'otherKycNumberLink'
     */
    @Test
    public void otherKycNumberLinkTest() {
        // TODO: test otherKycNumberLink
    }

    /**
     * Test the property 'otherKycNumberLinkPassword'
     */
    @Test
    public void otherKycNumberLinkPasswordTest() {
        // TODO: test otherKycNumberLinkPassword
    }

    /**
     * Test the property 'rentAgreementLink'
     */
    @Test
    public void rentAgreementLinkTest() {
        // TODO: test rentAgreementLink
    }

    /**
     * Test the property 'rentAgreementLinkPassword'
     */
    @Test
    public void rentAgreementLinkPasswordTest() {
        // TODO: test rentAgreementLinkPassword
    }

    /**
     * Test the property 'utilityBillsLink'
     */
    @Test
    public void utilityBillsLinkTest() {
        // TODO: test utilityBillsLink
    }

    /**
     * Test the property 'utilityBillsLinkPassword'
     */
    @Test
    public void utilityBillsLinkPasswordTest() {
        // TODO: test utilityBillsLinkPassword
    }

    /**
     * Test the property 'photoLink'
     */
    @Test
    public void photoLinkTest() {
        // TODO: test photoLink
    }

    /**
     * Test the property 'photoLinkPassword'
     */
    @Test
    public void photoLinkPasswordTest() {
        // TODO: test photoLinkPassword
    }

    /**
     * Test the property 'maritalStatus'
     */
    @Test
    public void maritalStatusTest() {
        // TODO: test maritalStatus
    }

    /**
     * Test the property 'religion'
     */
    @Test
    public void religionTest() {
        // TODO: test religion
    }

    /**
     * Test the property 'nationality'
     */
    @Test
    public void nationalityTest() {
        // TODO: test nationality
    }

    /**
     * Test the property 'bureauScore'
     */
    @Test
    public void bureauScoreTest() {
        // TODO: test bureauScore
    }

    /**
     * Test the property 'bureauReportLink'
     */
    @Test
    public void bureauReportLinkTest() {
        // TODO: test bureauReportLink
    }

    /**
     * Test the property 'bureauReportLinkPassword'
     */
    @Test
    public void bureauReportLinkPasswordTest() {
        // TODO: test bureauReportLinkPassword
    }

    /**
     * Test the property 'partnerScore'
     */
    @Test
    public void partnerScoreTest() {
        // TODO: test partnerScore
    }

}
